Index: app/src/main/java/llc/amplitudo/base/ui/login/LoginViewModel.kt
===================================================================
--- app/src/main/java/llc/amplitudo/base/ui/login/LoginViewModel.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/amplitudo/base/ui/login/LoginViewModel.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
@@ -1,36 +0,0 @@
-package llc.amplitudo.base.ui.login
-
-import android.app.Application
-import androidx.lifecycle.*
-import kotlinx.coroutines.delay
-import llc.amplitudo.base.data.repo.UserRepository
-import llc.amplitudo.base.shared.base.Resource
-import llc.amplitudo.base.shared.kotlin.isValidEmail
-import llc.amplitudo.base.shared.kotlin.isValidPassword
-import okhttp3.ResponseBody
-
-class LoginViewModel(
-    application: Application,
-    private val userRepo: UserRepository
-) :
-    AndroidViewModel(application) {
-
-    val email = MutableLiveData<String>()
-    var password = MutableLiveData<String>()
-
-    val formValid = MediatorLiveData<Boolean>().apply {
-        addSource(email) {
-            value = it.isValidEmail() && password.value.isValidPassword()
-        }
-        addSource(password) {
-            value = it.isValidPassword() && email.value.isValidEmail()
-        }
-    }
-
-    fun isUserLoggedIn() = liveData {
-        delay(1000)
-        emit(false)
-    }
-
-    fun authenticate() = userRepo.authenticate(email.value!!, password.value!!)
-}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_main.xml
===================================================================
--- app/src/main/res/layout/fragment_main.xml	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/res/layout/fragment_main.xml	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
@@ -1,29 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent">
-
-    <com.google.android.material.button.MaterialButton
-        android:id="@+id/main_toggle_language"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="@string/toggle_language"
-        app:layout_constraintBottom_toTopOf="@+id/main_toggle_mode"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintHorizontal_bias="0.5"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
-
-    <com.google.android.material.button.MaterialButton
-        android:id="@+id/main_toggle_mode"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="@string/change_theme"
-        app:layout_constraintBottom_toBottomOf="parent"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintHorizontal_bias="0.5"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/main_toggle_language" />
-
-</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/llc/amplitudo/base/ui/login/LoginFragment.kt
===================================================================
--- app/src/main/java/llc/amplitudo/base/ui/login/LoginFragment.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/amplitudo/base/ui/login/LoginFragment.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
@@ -1,63 +0,0 @@
-package llc.amplitudo.base.ui.login
-
-import android.os.Bundle
-import android.view.LayoutInflater
-import android.view.View
-import android.view.ViewGroup
-import androidx.databinding.DataBindingUtil
-import androidx.fragment.app.Fragment
-import androidx.navigation.fragment.findNavController
-import kotlinx.android.synthetic.main.fragment_login.*
-import llc.amplitudo.base.R
-import llc.amplitudo.base.databinding.FragmentLoginBinding
-import llc.amplitudo.base.shared.base.Resource
-import llc.amplitudo.base.shared.kotlin.observeWithLoading
-import llc.amplitudo.base.shared.kotlin.setAsRootView
-import org.koin.androidx.viewmodel.ext.android.viewModel
-
-class LoginFragment : Fragment() {
-    private val viewModel: LoginViewModel by viewModel()
-    private lateinit var binding: FragmentLoginBinding
-
-    override fun onCreateView(
-        inflater: LayoutInflater,
-        container: ViewGroup?,
-        savedInstanceState: Bundle?
-    ): View? {
-        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_login, container, false)
-        binding.viewModel = viewModel
-        binding.lifecycleOwner = viewLifecycleOwner
-        return binding.root
-    }
-
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        viewModel.isUserLoggedIn().observe(viewLifecycleOwner, {
-            when (it) {
-                true -> navigateToMain()
-                false -> initLogin()
-            }
-        })
-    }
-
-    private fun navigateToMain() {
-        findNavController().navigate(R.id.action_loginFragment_to_mainFragment)
-    }
-
-    private fun initLogin() {
-        login_root.transitionToEnd()
-        login_root.setAsRootView()
-
-        login_continue.setOnClickListener {
-            viewModel.authenticate().observeWithLoading(requireContext(), viewLifecycleOwner, {
-                when (it) {
-                    is Resource.Success -> {
-                        navigateToMain()
-                    }
-                }
-            })
-        }
-    }
-}
-
Index: app/src/main/res/values-sr-rME/strings.xml
===================================================================
--- app/src/main/res/values-sr-rME/strings.xml	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/res/values-sr-rME/strings.xml	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
@@ -1,15 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string name="default_error">Unknown error</string>
-    <string name="yes">Da</string>
-    <string name="no">Ne</string>
-    <string name="ok">OK</string>
-    <string name="email_label">Email:</string>
-    <string name="password_label">Password:</string>
-    <string name="login">Prijavite se</string>
-    <string name="toggle_language">Promijeni jezik</string>
-    <string name="change_theme">Promijeni temu</string>
-    <string name="reset">Reset</string>
-    <string name="log_out">Log out</string>
-    <string name="debug_menu">Debug menu</string>
-</resources>
\ No newline at end of file
Index: app/src/main/res/layout/fragment_login.xml
===================================================================
--- app/src/main/res/layout/fragment_login.xml	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/res/layout/fragment_login.xml	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
@@ -1,84 +0,0 @@
-<layout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools">
-
-    <data>
-
-        <variable
-            name="viewModel"
-            type="llc.amplitudo.base.ui.login.LoginViewModel" />
-    </data>
-
-    <androidx.constraintlayout.motion.widget.MotionLayout
-        android:id="@+id/login_root"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        app:layoutDescription="@xml/fragment_login_scene"
-        tools:ignore="contentDescription">
-
-        <ImageView
-            android:id="@+id/login_logo"
-            android:layout_width="wrap_content"
-            android:layout_height="0dp"
-            android:layout_marginStart="32dp"
-            android:layout_marginTop="32dp"
-            android:layout_marginEnd="32dp"
-            android:adjustViewBounds="true"
-            android:gravity="center"
-            android:src="@drawable/logo"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintHeight_percent="0.4"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toTopOf="parent" />
-
-        <com.google.android.material.textfield.TextInputEditText
-            android:id="@+id/login_email"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_marginStart="32dp"
-            android:layout_marginTop="32dp"
-            android:layout_marginEnd="32dp"
-            android:autofillHints=".AUTOFILL_HINT_EMAIL_ADDRESS"
-            android:hint="@string/email_label"
-            android:inputType="textEmailAddress"
-            android:singleLine="true"
-            android:text="@={viewModel.email}"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintHorizontal_bias="0.0"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/login_logo" />
-
-        <com.google.android.material.textfield.TextInputEditText
-            android:id="@+id/login_password"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_marginStart="32dp"
-            android:layout_marginTop="32dp"
-            android:layout_marginEnd="32dp"
-            android:autofillHints=".AUTOFILL_HINT_PASSWORD"
-            android:hint="@string/password_label"
-            android:inputType="textPassword"
-            android:nextFocusDown="@id/login_continue"
-            android:text="@={viewModel.password}"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/login_username" />
-
-        <com.google.android.material.button.MaterialButton
-            android:id="@+id/login_continue"
-            android:layout_width="0dp"
-            android:layout_height="wrap_content"
-            android:layout_marginStart="32dp"
-            android:layout_marginTop="32dp"
-            android:layout_marginEnd="32dp"
-            android:layout_marginBottom="32dp"
-            android:enabled="@{viewModel.formValid}"
-            android:text="@string/login"
-            app:layout_constraintBottom_toBottomOf="parent"
-            app:layout_constraintEnd_toEndOf="parent"
-            app:layout_constraintStart_toStartOf="parent"
-            app:layout_constraintTop_toBottomOf="@+id/login_password"
-            app:layout_constraintVertical_bias="1.0" />
-    </androidx.constraintlayout.motion.widget.MotionLayout>
-
-</layout>
\ No newline at end of file
Index: app/src/main/java/llc/amplitudo/base/ui/main/MainFragment.kt
===================================================================
--- app/src/main/java/llc/amplitudo/base/ui/main/MainFragment.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/amplitudo/base/ui/main/MainFragment.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
@@ -1,28 +0,0 @@
-package llc.amplitudo.base.ui.main
-
-import android.content.res.Configuration
-import android.os.Bundle
-import android.view.View
-import androidx.fragment.app.Fragment
-import kotlinx.android.synthetic.main.fragment_main.*
-import llc.amplitudo.base.R
-import llc.amplitudo.base.shared.util.PreferenceCache.Companion.LANGUAGE_ME
-import llc.amplitudo.base.shared.util.SettingsManager
-import org.koin.android.ext.android.inject
-import java.util.*
-
-class MainFragment : Fragment(R.layout.fragment_main) {
-    private val settingsManager: SettingsManager by inject()
-
-    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
-        super.onViewCreated(view, savedInstanceState)
-
-        main_toggle_language.setOnClickListener {
-            settingsManager.changeLanguage(requireActivity(), Locale.forLanguageTag(LANGUAGE_ME))
-        }
-
-        main_toggle_mode.setOnClickListener {
-            settingsManager.changeUiMode(requireActivity(), Configuration.UI_MODE_NIGHT_YES)
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/llc/amplitudo/base/ui/popup/DebugPopup.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.ui.popup\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.Activity\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.os.VibrationEffect\r\nimport android.os.Vibrator\r\nimport android.view.Gravity\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.PopupWindow\r\nimport llc.amplitudo.base.R\r\nimport llc.amplitudo.base.shared.kotlin.dimBackground\r\nimport llc.amplitudo.base.shared.kotlin.setElementOnClick\r\n\r\n@SuppressLint(\"InflateParams\")\r\nclass DebugPopup(\r\n    private val activity: Activity,\r\n    private val layout: View,\r\n    private val logoutCallback: () -> Unit,\r\n    private val resetCallback: () -> Unit\r\n) : PopupWindow() {\r\n    private val inflater =\r\n        activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\r\n\r\n    init {\r\n        contentView = inflater.inflate(R.layout.popup_debug, null)\r\n        width = ViewGroup.LayoutParams.WRAP_CONTENT\r\n        height = ViewGroup.LayoutParams.WRAP_CONTENT\r\n        elevation = 36F\r\n        isFocusable = true\r\n        animationStyle = R.style.PopupAnimation\r\n\r\n        setElementOnClick(R.id.debug_log_out) {\r\n            dismiss()\r\n            logoutCallback()\r\n        }\r\n\r\n        setElementOnClick(R.id.debug_reset) {\r\n            dismiss()\r\n            resetCallback()\r\n        }\r\n    }\r\n\r\n    fun show() {\r\n        showAtLocation(layout, Gravity.CENTER, 0, 0)\r\n        val v = activity.getSystemService(Context.VIBRATOR_SERVICE) as Vibrator\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            v.vibrate(VibrationEffect.createOneShot(100, VibrationEffect.DEFAULT_AMPLITUDE))\r\n        } else v.vibrate(100)\r\n        dimBackground()\r\n    }\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/ui/popup/DebugPopup.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/ui/popup/DebugPopup.kt	(date 1621095086856)
@@ -1,4 +1,4 @@
-package llc.amplitudo.base.ui.popup
+package llc.aerMist.base.ui.popup
 
 import android.annotation.SuppressLint
 import android.app.Activity
@@ -11,9 +11,9 @@
 import android.view.View
 import android.view.ViewGroup
 import android.widget.PopupWindow
-import llc.amplitudo.base.R
-import llc.amplitudo.base.shared.kotlin.dimBackground
-import llc.amplitudo.base.shared.kotlin.setElementOnClick
+import llc.aerMist.base.R
+import llc.aerMist.base.shared.kotlin.dimBackground
+import llc.aerMist.base.shared.kotlin.setElementOnClick
 
 @SuppressLint("InflateParams")
 class DebugPopup(
Index: app/src/main/java/llc/amplitudo/base/vo/ErrorResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.vo\r\n\r\ndata class ErrorResponse(\r\n    val message: String? = null\r\n)
===================================================================
--- app/src/main/java/llc/amplitudo/base/vo/ErrorResponse.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/vo/ErrorResponse.kt	(date 1621095086644)
@@ -1,4 +1,4 @@
-package llc.amplitudo.base.vo
+package llc.aerMist.base.vo
 
 data class ErrorResponse(
     val message: String? = null
Index: app/src/main/java/llc/amplitudo/base/data/repo/UserRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.data.repo\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.liveData\r\nimport kotlinx.coroutines.Dispatchers\r\nimport llc.amplitudo.base.data.remote.AccessTokenListener\r\nimport llc.amplitudo.base.data.remote.AuthorizationInterceptor\r\nimport llc.amplitudo.base.data.remote.RemoteDataSource\r\nimport llc.amplitudo.base.data.remote.TokenRefreshAuthenticator\r\nimport llc.amplitudo.base.shared.base.Resource\r\n\r\nclass UserRepository(\r\n    private val remoteDataSource: RemoteDataSource,\r\n    private val accessTokenListener: AccessTokenListener,\r\n    authenticator: TokenRefreshAuthenticator\r\n) {\r\n    init {\r\n        authenticator.userRepository = this\r\n    }\r\n\r\n    fun authenticate(email: String, password: String) =\r\n        retrieve { remoteDataSource.authenticate(email, password) }\r\n\r\n    fun refreshToken(): String {\r\n        val newToken = \"\"\r\n        accessTokenListener.onChanged(newToken)\r\n        return newToken\r\n    }\r\n\r\n    private fun <T> retrieve(networkCall: suspend () -> Resource<T>): LiveData<Resource<T>> =\r\n        liveData(Dispatchers.Default) {\r\n            emit(Resource.Loading())\r\n            val response = networkCall()\r\n            emit(response)\r\n        }\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/data/repo/UserRepository.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/data/repo/UserRepository.kt	(date 1621095086706)
@@ -1,13 +1,12 @@
-package llc.amplitudo.base.data.repo
+package llc.aerMist.base.data.repo
 
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.liveData
 import kotlinx.coroutines.Dispatchers
-import llc.amplitudo.base.data.remote.AccessTokenListener
-import llc.amplitudo.base.data.remote.AuthorizationInterceptor
-import llc.amplitudo.base.data.remote.RemoteDataSource
-import llc.amplitudo.base.data.remote.TokenRefreshAuthenticator
-import llc.amplitudo.base.shared.base.Resource
+import llc.aerMist.base.data.remote.AccessTokenListener
+import llc.aerMist.base.data.remote.RemoteDataSource
+import llc.aerMist.base.data.remote.TokenRefreshAuthenticator
+import llc.aerMist.base.shared.base.Resource
 
 class UserRepository(
     private val remoteDataSource: RemoteDataSource,
Index: app/src/main/res/values-night/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <color name=\"colorPrimary\">#6200EE</color>\r\n    <color name=\"colorPrimaryDark\">#3700B3</color>\r\n    <color name=\"colorAccent\">#03DAC5</color>\r\n</resources>
===================================================================
--- app/src/main/res/values-night/colors.xml	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/res/values-night/colors.xml	(date 1621082551185)
@@ -2,5 +2,7 @@
 <resources>
     <color name="colorPrimary">#6200EE</color>
     <color name="colorPrimaryDark">#3700B3</color>
-    <color name="colorAccent">#03DAC5</color>
+    <color name="colorAccent">#F36D21</color>
+    <color name="white">#FFFFFF</color>
+    <color name="orange">#F36D21</color>
 </resources>
\ No newline at end of file
Index: app/src/main/java/llc/amplitudo/base/data/remote/AuthorizationInterceptor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.data.remote\r\n\r\nimport llc.amplitudo.base.shared.util.PreferenceCache\r\nimport llc.amplitudo.base.shared.kotlin.signWithToken\r\nimport okhttp3.Interceptor\r\nimport okhttp3.Response\r\n\r\nclass AuthorizationInterceptor(private val prefsCache: PreferenceCache) : Interceptor,\r\n    AccessTokenListener {\r\n    private var accessToken: String = \"\"\r\n        set(value) {\r\n            prefsCache.accessToken = value\r\n            field = value\r\n        }\r\n\r\n    override fun intercept(chain: Interceptor.Chain): Response {\r\n        val signedRequest = chain.request().signWithToken(accessToken)\r\n        return chain.proceed(signedRequest)\r\n    }\r\n\r\n    override fun onChanged(newToken: String) {\r\n        accessToken = newToken\r\n    }\r\n}\r\n\r\ninterface AccessTokenListener {\r\n    fun onChanged(newToken: String)\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/data/remote/AuthorizationInterceptor.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/data/remote/AuthorizationInterceptor.kt	(date 1621095086877)
@@ -1,7 +1,7 @@
-package llc.amplitudo.base.data.remote
+package llc.aerMist.base.data.remote
 
-import llc.amplitudo.base.shared.util.PreferenceCache
-import llc.amplitudo.base.shared.kotlin.signWithToken
+import llc.aerMist.base.shared.util.PreferenceCache
+import llc.aerMist.base.shared.kotlin.signWithToken
 import okhttp3.Interceptor
 import okhttp3.Response
 
Index: app/src/main/java/llc/amplitudo/base/data/remote/ApiService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.data.remote\r\n\r\nimport llc.amplitudo.base.vo.AuthenticationRequest\r\nimport okhttp3.ResponseBody\r\nimport retrofit2.Response\r\nimport retrofit2.http.Body\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.POST\r\n\r\n\r\ninterface ApiService {\r\n    @POST(\"/\")\r\n    suspend fun authenticate(@Body authenticationRequest: AuthenticationRequest): Response<ResponseBody>\r\n\r\n    @POST(\"/\")\r\n    suspend fun refreshToken(): Response<ResponseBody>\r\n\r\n    @GET(\"/posts/1\")\r\n    suspend fun testRequest(): Response<ResponseBody>\r\n\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/data/remote/ApiService.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/data/remote/ApiService.kt	(date 1621095086759)
@@ -1,6 +1,6 @@
-package llc.amplitudo.base.data.remote
+package llc.aerMist.base.data.remote
 
-import llc.amplitudo.base.vo.AuthenticationRequest
+import llc.aerMist.base.vo.AuthenticationRequest
 import okhttp3.ResponseBody
 import retrofit2.Response
 import retrofit2.http.Body
Index: app/src/main/java/llc/amplitudo/base/data/remote/RemoteDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.data.remote\r\n\r\nimport llc.amplitudo.base.shared.base.BaseDataSource\r\n\r\nclass RemoteDataSource(private val apiService: ApiService) : BaseDataSource() {\r\n\r\n    suspend fun authenticate(email: String, password: String) =\r\n        getResult { apiService.testRequest() }\r\n}\r\n
===================================================================
--- app/src/main/java/llc/amplitudo/base/data/remote/RemoteDataSource.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/data/remote/RemoteDataSource.kt	(date 1621095086778)
@@ -1,6 +1,6 @@
-package llc.amplitudo.base.data.remote
+package llc.aerMist.base.data.remote
 
-import llc.amplitudo.base.shared.base.BaseDataSource
+import llc.aerMist.base.shared.base.BaseDataSource
 
 class RemoteDataSource(private val apiService: ApiService) : BaseDataSource() {
 
Index: app/src/main/java/llc/amplitudo/base/data/remote/TokenRefreshAuthenticator.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.data.remote\r\n\r\nimport llc.amplitudo.base.data.repo.UserRepository\r\nimport llc.amplitudo.base.shared.kotlin.signWithToken\r\nimport okhttp3.Authenticator\r\nimport okhttp3.Request\r\nimport okhttp3.Response\r\nimport okhttp3.Route\r\nimport timber.log.Timber\r\n\r\nclass TokenRefreshAuthenticator() : Authenticator {\r\n    var userRepository: UserRepository? = null\r\n\r\n    private val Response.retryCount: Int\r\n        get() {\r\n            var currentResponse = priorResponse\r\n            var result = 0\r\n            while (currentResponse != null) {\r\n                result++\r\n                currentResponse = currentResponse.priorResponse\r\n            }\r\n            return result\r\n        }\r\n\r\n    override fun authenticate(route: Route?, response: Response): Request? = when {\r\n        response.retryCount > 2 -> null\r\n        else -> response.createSignedRequest()\r\n    }\r\n\r\n    private fun Response.createSignedRequest(): Request? = try {\r\n        val accessToken = userRepository?.refreshToken()\r\n        request.signWithToken(accessToken)\r\n    } catch (error: Throwable) {\r\n        Timber.e(\"Failed to resign request\")\r\n        null\r\n    }\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/data/remote/TokenRefreshAuthenticator.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/data/remote/TokenRefreshAuthenticator.kt	(date 1621095086773)
@@ -1,7 +1,7 @@
-package llc.amplitudo.base.data.remote
+package llc.aerMist.base.data.remote
 
-import llc.amplitudo.base.data.repo.UserRepository
-import llc.amplitudo.base.shared.kotlin.signWithToken
+import llc.aerMist.base.data.repo.UserRepository
+import llc.aerMist.base.shared.kotlin.signWithToken
 import okhttp3.Authenticator
 import okhttp3.Request
 import okhttp3.Response
Index: app/src/main/java/llc/amplitudo/base/shared/base/Resource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.shared.base\r\n\r\nsealed class Resource<T>(\r\n    val data: T? = null,\r\n    val message: String? = null\r\n) {\r\n    class Success<T>(data: T) : Resource<T>(data)\r\n    class Loading<T>(data: T? = null) : Resource<T>(data)\r\n    class Error<T>(message: String, data: T? = null) : Resource<T>(data, message)\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/shared/base/Resource.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/shared/base/Resource.kt	(date 1621095086754)
@@ -1,4 +1,4 @@
-package llc.amplitudo.base.shared.base
+package llc.aerMist.base.shared.base
 
 sealed class Resource<T>(
     val data: T? = null,
Index: app/src/main/java/llc/amplitudo/base/shared/base/BaseDataSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.shared.base\r\n\r\nimport com.google.gson.Gson\r\nimport llc.amplitudo.base.vo.ErrorResponse\r\nimport retrofit2.HttpException\r\nimport retrofit2.Response\r\n\r\nabstract class BaseDataSource {\r\n    protected suspend fun <T> getResult(call: suspend () -> Response<T>): Resource<T> {\r\n        try {\r\n            val response = call()\r\n            if (response.isSuccessful) {\r\n                val body = response.body()\r\n                if (body != null) return Resource.Success(body)\r\n            }\r\n            return error(\" ${response.code()} ${response.message()}\")\r\n        } catch (e: Exception) {\r\n            if (e is HttpException) {\r\n                val errorResponse = Gson().fromJson(\r\n                    e.response()?.errorBody()?.charStream(),\r\n                    ErrorResponse::class.java\r\n                )\r\n                return error(errorResponse?.message)\r\n            }\r\n\r\n            return error(e.message ?: e.toString())\r\n        }\r\n    }\r\n\r\n    private fun <T> error(message: String?): Resource<T> {\r\n        return Resource.Error(\"Network call has failed for the following reason: $message\")\r\n    }\r\n\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/shared/base/BaseDataSource.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/shared/base/BaseDataSource.kt	(date 1621095086739)
@@ -1,7 +1,7 @@
-package llc.amplitudo.base.shared.base
+package llc.aerMist.base.shared.base
 
 import com.google.gson.Gson
-import llc.amplitudo.base.vo.ErrorResponse
+import llc.aerMist.base.vo.ErrorResponse
 import retrofit2.HttpException
 import retrofit2.Response
 
Index: app/src/main/java/llc/amplitudo/base/shared/base/BaseActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.shared.base\r\n\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport llc.amplitudo.base.shared.util.OnShakeListener\r\n\r\nabstract class BaseActivity(layoutId: Int) : AppCompatActivity(layoutId), OnShakeListener {\r\n\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/shared/base/BaseActivity.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/shared/base/BaseActivity.kt	(date 1621095086852)
@@ -1,7 +1,7 @@
-package llc.amplitudo.base.shared.base
+package llc.aerMist.base.shared.base
 
 import androidx.appcompat.app.AppCompatActivity
-import llc.amplitudo.base.shared.util.OnShakeListener
+import llc.aerMist.base.shared.util.OnShakeListener
 
 abstract class BaseActivity(layoutId: Int) : AppCompatActivity(layoutId), OnShakeListener {
 
Index: app/src/main/java/llc/amplitudo/base/shared/util/PreferenceCache.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.shared.util\r\n\r\nimport android.content.Context\r\nimport android.content.res.Configuration\r\nimport androidx.preference.PreferenceManager\r\nimport java.util.*\r\n\r\nclass PreferenceCache(val context: Context) {\r\n    private val prefs = PreferenceManager.getDefaultSharedPreferences(context)\r\n\r\n    var locale: Locale\r\n        get() = Locale.forLanguageTag(prefs.getString(LOCALE, Locale.ENGLISH.language).orEmpty())\r\n        set(value) = with(prefs.edit()) {\r\n            putString(LOCALE, value.toLanguageTag())\r\n            apply()\r\n        }\r\n\r\n    var uiMode: Int\r\n        get() = prefs.getInt(UI_MODE, Configuration.UI_MODE_NIGHT_NO)\r\n        set(value) = with(prefs.edit()) {\r\n            putInt(UI_MODE, value)\r\n            apply()\r\n        }\r\n\r\n    var accessToken: String\r\n        get() = prefs.getString(AUTH_TOKEN, \"\").orEmpty()\r\n        set(value) = with(prefs.edit()) {\r\n            putString(AUTH_TOKEN, value)\r\n            apply()\r\n        }\r\n\r\n    var refreshToken: String\r\n        get() = prefs.getString(REFRESH_TOKEN, \"\").orEmpty()\r\n        set(value) = with(prefs.edit()) {\r\n            putString(REFRESH_TOKEN, value)\r\n            apply()\r\n        }\r\n\r\n    fun clear() {\r\n        prefs.edit()\r\n            .remove(AUTH_TOKEN)\r\n            .remove(REFRESH_TOKEN)\r\n            .remove(LOCALE)\r\n            .remove(UI_MODE)\r\n            .apply()\r\n    }\r\n\r\n    companion object {\r\n        private const val AUTH_TOKEN = \"authentication_token\"\r\n        private const val REFRESH_TOKEN = \"refresh_token\"\r\n        private const val LOCALE = \"locale\"\r\n        private const val UI_MODE = \"ui_mode\"\r\n\r\n        const val LANGUAGE_ME = \"sr-Latn-ME\"\r\n    }\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/shared/util/PreferenceCache.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/shared/util/PreferenceCache.kt	(date 1621447041945)
@@ -1,9 +1,11 @@
-package llc.amplitudo.base.shared.util
+package llc.aerMist.base.shared.util
 
 import android.content.Context
 import android.content.res.Configuration
 import androidx.preference.PreferenceManager
+import llc.aerMist.base.models.MyDevice
 import java.util.*
+import kotlin.collections.ArrayList
 
 class PreferenceCache(val context: Context) {
     private val prefs = PreferenceManager.getDefaultSharedPreferences(context)
@@ -28,13 +30,32 @@
             putString(AUTH_TOKEN, value)
             apply()
         }
-
-    var refreshToken: String
-        get() = prefs.getString(REFRESH_TOKEN, "").orEmpty()
+    var firstDevice: String
+        get() = prefs.getString(FIRST_DEVICE, "").orEmpty()
+        set(value) = with(prefs.edit()) {
+            putString(FIRST_DEVICE, value)
+            apply()
+        }
+    var secondDevice: String
+        get() = prefs.getString(SECOND_DEVICE, "").orEmpty()
+        set(value) = with(prefs.edit()) {
+            putString(SECOND_DEVICE, value)
+            apply()
+        }
+    var thirdDevice: String
+        get() = prefs.getString(THIRD_DEVICE, "").orEmpty()
         set(value) = with(prefs.edit()) {
-            putString(REFRESH_TOKEN, value)
+            putString(THIRD_DEVICE, value)
             apply()
         }
+    var fourthDevice: String
+        get() = prefs.getString(FOURT_DEVICE, "").orEmpty()
+        set(value) = with(prefs.edit()) {
+            putString(FOURT_DEVICE, value)
+            apply()
+        }
+
+
 
     fun clear() {
         prefs.edit()
@@ -42,6 +63,10 @@
             .remove(REFRESH_TOKEN)
             .remove(LOCALE)
             .remove(UI_MODE)
+            .remove(FIRST_DEVICE)
+            .remove(SECOND_DEVICE)
+            .remove(THIRD_DEVICE)
+            .remove(FOURT_DEVICE)
             .apply()
     }
 
@@ -50,7 +75,9 @@
         private const val REFRESH_TOKEN = "refresh_token"
         private const val LOCALE = "locale"
         private const val UI_MODE = "ui_mode"
-
-        const val LANGUAGE_ME = "sr-Latn-ME"
+        private const val FIRST_DEVICE = "first_device"
+        private const val SECOND_DEVICE = "second_device"
+        private const val THIRD_DEVICE = "third_device"
+        private const val FOURT_DEVICE = "fourt_device"
     }
 }
\ No newline at end of file
Index: app/src/main/java/llc/amplitudo/base/shared/util/ShakeDetector.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.shared.util\r\n\r\nimport android.content.Context\r\nimport android.content.Context.SENSOR_SERVICE\r\nimport android.hardware.Sensor\r\nimport android.hardware.SensorEvent\r\nimport android.hardware.SensorEventListener\r\nimport android.hardware.SensorManager\r\nimport kotlin.math.sqrt\r\n\r\nclass ShakeDetector(context: Context) {\r\n    private var listeners = arrayListOf<OnShakeListener>()\r\n    private var mShakeTimestamp: Long = 0\r\n    private var mShakeCount = 0\r\n\r\n    private val sensorManager = context.getSystemService(SENSOR_SERVICE) as SensorManager\r\n    private val accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)\r\n\r\n    private val sensorEventListener = object : SensorEventListener {\r\n        override fun onAccuracyChanged(sensor: Sensor, accuracy: Int) {}\r\n\r\n        override fun onSensorChanged(event: SensorEvent) {\r\n            val x = event.values[0]\r\n            val y = event.values[1]\r\n            val z = event.values[2]\r\n            val gX = x / SensorManager.GRAVITY_EARTH\r\n            val gY = y / SensorManager.GRAVITY_EARTH\r\n            val gZ = z / SensorManager.GRAVITY_EARTH\r\n            val gForce: Float = sqrt(gX * gX + gY * gY + gZ * gZ)\r\n            if (gForce > SHAKE_THRESHOLD_GRAVITY) {\r\n                val now = System.currentTimeMillis()\r\n                if (mShakeTimestamp + SHAKE_SLOP_TIME_MS > now) {\r\n                    return\r\n                }\r\n                if (mShakeTimestamp + SHAKE_COUNT_RESET_TIME_MS < now) {\r\n                    mShakeCount = 0\r\n                }\r\n                mShakeTimestamp = now\r\n                mShakeCount++\r\n                listeners.forEach {\r\n                    it.onShake(mShakeCount)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun attachOnShakeListener(listener: OnShakeListener) {\r\n        if (listeners.isEmpty()) {\r\n            sensorManager.registerListener(\r\n                sensorEventListener,\r\n                accelerometer,\r\n                SensorManager.SENSOR_DELAY_UI\r\n            )\r\n        }\r\n        listeners.add(listener)\r\n    }\r\n\r\n    fun detachOnShakeListener(listener: OnShakeListener) {\r\n        listeners.remove(listener)\r\n        if (listeners.isEmpty()) {\r\n            sensorManager.unregisterListener(sensorEventListener)\r\n        }\r\n    }\r\n\r\n\r\n    companion object {\r\n        private const val SHAKE_THRESHOLD_GRAVITY = 2.7f\r\n        private const val SHAKE_SLOP_TIME_MS = 500\r\n        private const val SHAKE_COUNT_RESET_TIME_MS = 3000\r\n    }\r\n}\r\n\r\ninterface OnShakeListener {\r\n    fun onShake(count: Int)\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/shared/util/ShakeDetector.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/shared/util/ShakeDetector.kt	(date 1621095086720)
@@ -1,4 +1,4 @@
-package llc.amplitudo.base.shared.util
+package llc.aerMist.base.shared.util
 
 import android.content.Context
 import android.content.Context.SENSOR_SERVICE
Index: app/src/main/java/llc/amplitudo/base/shared/util/SettingsManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.shared.util\r\n\r\nimport android.app.Activity\r\nimport android.content.Context\r\nimport android.content.res.Configuration\r\nimport android.os.Build\r\nimport android.os.LocaleList\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatDelegate\r\nimport java.util.*\r\nimport kotlin.collections.LinkedHashSet\r\n\r\nclass SettingsManager(private val prefsCache: PreferenceCache) {\r\n\r\n    fun attachBaseContext(base: Context?): Context? {\r\n        return updateSettings(base)\r\n    }\r\n\r\n    fun changeLanguage(activity: Activity?, locale: Locale) {\r\n        prefsCache.locale = locale\r\n        updateSettings(activity)\r\n        activity?.recreate()\r\n    }\r\n\r\n    fun changeUiMode(activity: Activity?, uiMode: Int) {\r\n        prefsCache.uiMode = uiMode\r\n        updateSettings(activity)\r\n        activity?.recreate()\r\n    }\r\n\r\n    @Suppress(\"DEPRECATION\")\r\n    private fun updateSettings(base: Context?): Context? {\r\n        val locale = prefsCache.locale\r\n        Locale.setDefault(locale)\r\n        val res = base?.resources\r\n        val config = Configuration(res?.configuration)\r\n        config.uiMode = prefsCache.uiMode\r\n        setDefaultNightMode(config.uiMode)\r\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\r\n            setLocaleForApi24(config, locale)\r\n            base?.createConfigurationContext(config)\r\n        } else {\r\n            config.setLocale(locale)\r\n            base?.createConfigurationContext(config)\r\n        }\r\n    }\r\n\r\n    private fun setDefaultNightMode(uiMode: Int?) {\r\n        if (uiMode == Configuration.UI_MODE_NIGHT_NO)\r\n            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)\r\n        else AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.N)\r\n    private fun setLocaleForApi24(\r\n        config: Configuration,\r\n        locale: Locale\r\n    ) {\r\n        val set: MutableSet<Locale> = LinkedHashSet()\r\n        set.add(locale)\r\n        val all = LocaleList.getDefault()\r\n        for (i in 0 until all.size()) {\r\n            set.add(all[i])\r\n        }\r\n        val locales = set.toTypedArray()\r\n        config.setLocales(LocaleList(*locales))\r\n    }\r\n\r\n    companion object {\r\n        enum class AppLanguage {\r\n            MONTENEGRIN,\r\n            ENGLISH\r\n        }\r\n    }\r\n}
===================================================================
--- app/src/main/java/llc/amplitudo/base/shared/util/SettingsManager.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/shared/util/SettingsManager.kt	(date 1621095086616)
@@ -1,4 +1,4 @@
-package llc.amplitudo.base.shared.util
+package llc.aerMist.base.shared.util
 
 import android.app.Activity
 import android.content.Context
Index: app/src/main/java/llc/amplitudo/base/shared/kotlin/BindingAdapters.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package llc.amplitudo.base.shared.kotlin\r\n\r\nimport android.graphics.drawable.Drawable\r\nimport android.widget.ImageView\r\nimport androidx.databinding.BindingAdapter\r\nimport llc.amplitudo.base.shared.GlideApp\r\n\r\n/**\r\n * Example:\r\n *\r\n * <ImageView\r\n *      ...\r\n *      app:glideSrc=\"@{viewModel.imageUrl}\"\r\n *      app:glidePlaceholderSrc=\"@{@drawable/image_placeholder}\"\r\n *      app:glideErrorSrc=\"@{@drawable/image_error}\"/>\r\n *\r\n */\r\n@Suppress(\"unused\")\r\n@BindingAdapter(value = [\"glideSrc\", \"glidePlaceholderSrc\", \"glideErrorSrc\"], requireAll = false)\r\nfun ImageView.bindImage(url: String?, placeholder: Drawable?, error: Drawable?) {\r\n    if (url == null) {\r\n        setImageDrawable(placeholder)\r\n        return\r\n    }\r\n    val req = GlideApp.with(context).load(url)\r\n    if (placeholder != null)\r\n        req.placeholder(placeholder)\r\n    if (error != null)\r\n        req.error(error)\r\n    req.into(this)\r\n}\r\n\r\n
===================================================================
--- app/src/main/java/llc/amplitudo/base/shared/kotlin/BindingAdapters.kt	(revision dc5a076f27224eba3867e071243e56a2107fb9bc)
+++ app/src/main/java/llc/aerMist/base/shared/kotlin/BindingAdapters.kt	(date 1621095086897)
@@ -1,9 +1,9 @@
-package llc.amplitudo.base.shared.kotlin
+package llc.aerMist.base.shared.kotlin
 
 import android.graphics.drawable.Drawable
 import android.widget.ImageView
 import androidx.databinding.BindingAdapter
-import llc.amplitudo.base.shared.GlideApp
+import llc.aerMist.base.shared.GlideApp
 
 /**
  * Example:
