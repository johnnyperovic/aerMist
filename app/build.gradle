apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
// TODO: Uncomment if using Crashlytics/Google services, delete if not
// apply plugin: 'com.google.gms.google-services'
// apply plugin: 'com.google.firebase.crashlytics'

// TODO: Change application name
String appName = "aerMist"

// TODO: Change fixed version value (leave at 0.0 for new project)
def majorVersion = "0.0"

/**
 * Function to calculate dynamic version value
 * based on the number of commits to the repository
 **/
static def generateVersionCode() {
    def result = "git rev-list --all --count".execute().text.trim()
    if (result.empty) result = "PowerShell -Command git rev-list HEAD --count".execute().text.trim()
    if (result.empty) result = 1
    return result.toInteger()
}

// TODO: Add keystore.jks file in app root folder, and if needed, keystore_debug.jks file
// TODO: Change values in app/keystore.properties file
Properties keystore
Boolean keystoreFileExists = project.file('keystore.properties').exists()
if (keystoreFileExists) {
    keystore = new Properties()
    keystore.load(project.file('keystore.properties').newDataInputStream())
}

android {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        if (keystoreFileExists) {
            release {
                keyAlias keystore['KeyAlias']
                keyPassword keystore['KeyPassword']
                storeFile file(keystore['StorePath'])
                storePassword keystore['StorePassword']
            }
            debug {
                // TODO: Uncomment if using a debug keystore, delete if not
/*                keyAlias keystore['DebugKeyAlias']
                keyPassword keystore['DebugKeyPassword']
                storeFile file(keystore['DebugStorePath'])
                storePassword keystore['DebugStorePassword']*/
            }
        }
    }

    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    defaultConfig {
        applicationId "llc.aerMis.base"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode generateVersionCode()
        versionName "${majorVersion}.${generateVersionCode()}"

        manifestPlaceholders = [
                appIcon       : "@mipmap/ic_launcher",
                appIconRounded: "@mipmap/ic_launcher_round",
        ]

        resValue "string", "app_name", appName
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        production {
            initWith(buildTypes.release)
            applicationIdSuffix '.production'
            versionNameSuffix ' - Production'

            // TODO: Insert correct icons for production build type
            manifestPlaceholders = [
                    appIcon       : "@mipmap/ic_launcher",
                    appIconRounded: "@mipmap/ic_launcher_round",
            ]

            resValue "string", "app_name", "${appName} Production"

            buildConfigField("String", "MAPS_API_KEY", "\"AIzaSyC1BZ4JkHM_aYSINyg7YFOXv-TQ1hYyup4\"")
        }
        staging {
            initWith(buildTypes.debug)
            applicationIdSuffix '.staging'
            versionNameSuffix ' - Staging'

            // TODO: Insert correct icons for staging build type
            manifestPlaceholders = [
                    appIcon       : "@mipmap/ic_launcher",
                    appIconRounded: "@mipmap/ic_launcher_round",
            ]

            resValue "string", "app_name", "${appName} Staging"

            buildConfigField("String", "MAPS_API_KEY", "\"AIzaSyC1BZ4JkHM_aYSINyg7YFOXv-TQ1hYyup4\"")
        }
    }
    buildFeatures {
        dataBinding = true
    }
    flavorDimensions "apiUrl"
    productFlavors {
        localApi {
            // TODO: Change base url for local API
            dimension "apiUrl"
            buildConfigField("String", "BASE_URL", "\"https://jsonplaceholder.typicode.com/\"")
        }
        remoteApi {
            // TODO: Change base url for remote API
            dimension "apiUrl"
            buildConfigField("String", "BASE_URL", "\"https://jsonplaceholder.typicode.com/\"")
        }
    }
}

dependencies {
    //TODO: Scan dependencies for new versions
    // (Analyze->Run Inspection by Name...->"Newer library versions available")
    // If needed, change versions by changing variables in project build.gradle file

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugar_version"

    // AppCompat
    implementation "androidx.appcompat:appcompat:$appcompat_version"

    // Kotlin Core
    implementation "androidx.core:core-ktx:$coreKtx_version"

    // Preference
    implementation "androidx.preference:preference-ktx:$preference_version"

    // Constraint Layout
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayout_version"

    // Material
    implementation "com.google.android.material:material:$material_version"

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"

    // OkHttp
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Lottie
    implementation "com.airbnb.android:lottie:$lottie_version"

    // Koin
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    // TODO: Uncomment if using Crashlytics, delete if not
    // Crashlytics
    // implementation "com.google.firebase:firebase-crashlytics:$crashlytics_version"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"
    //BLE
    implementation 'com.clj.fastble:FastBleLib:2.3.4'
}

